generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  fullName    String
  email       String   @unique
  password    String
  projectRole UserRole
  avatarUrl   String
  appRole     AppRole
  status      String
  lastLoginAt DateTime?

  logEntries  LogEntry[]
  comments    Comment[]
  commitments Commitment[]
  signatures  Signature[]
  assignedLogEntries LogEntry[] @relation("LogEntryAssignees") // <-- AÑADE ESTA LÍNEA
  observations       Observation[] // <-- AÑADE ESTA LÍNEA (Un usuario puede hacer muchas observaciones)
  communications     Communication[] @relation("UploadedCommunications") // <-- AÑADE ESTA LÍNEA
  drawingVersions  DrawingVersion[] // <-- AÑADE ESTA LÍNEA
}

enum UserRole {
  RESIDENT
  SUPERVISOR
  CONTRACTOR_REP
  ADMIN
  GUEST // <-- AÑADE ESTA LÍNEA
}


enum AppRole {
  admin
  editor
  viewer
}

model Project {
  id         String @id @default(cuid())
  name       String
  contractId String @unique
  logEntries LogEntry[]
}

model LogEntry {
  id                      String      @id @default(cuid())
  folioNumber             Int         @unique @default(autoincrement())
  title                   String
  description             String      @db.Text
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  activityStartDate       DateTime
  activityEndDate         DateTime
  location                String
  subject                 String
  type                    EntryType
  status                  EntryStatus
  isConfidential          Boolean     @default(false)
  requiredSignatoriesJson String?     @db.Text

  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  comments    Comment[]
  attachments Attachment[]
  signatures  Signature[]
  assignees   User[]    @relation("LogEntryAssignees") // <-- AÑADE ESTA LÍNEA
}

enum EntryType {
  QUALITY
  ADMINISTRATIVE
  SAFETY
  GENERAL
}

enum EntryStatus {
  APPROVED
  NEEDS_REVIEW
  SUBMITTED
  REJECTED
  DRAFT
}

model Comment {
  id          String       @id @default(cuid())
  content     String       @db.Text
  timestamp   DateTime     @default(now())
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])

  logEntryId  String?
  logEntry    LogEntry?    @relation(fields: [logEntryId], references: [id], onDelete: Cascade)

  // --- LA CORRECCIÓN ESTÁ AQUÍ ---
  drawingId   String?      // Este campo solo guarda el ID
  drawing     Drawing?     @relation("DrawingComments", fields: [drawingId], references: [id], onDelete: Cascade) // El @relation va en el campo del objeto

  attachments Attachment[]
}

model Attachment {
  id         String  @id @default(cuid())
  fileName   String
  url        String  @db.Text
  size       Int
  type       String
  logEntryId String?
  logEntry   LogEntry? @relation(fields: [logEntryId], references: [id], onDelete: Cascade)
  commentId  String?
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  actaId     String?
  acta       Acta?     @relation(fields: [actaId], references: [id], onDelete: Cascade)
  costActaId String? // <-- AÑADE ESTA LÍNEA (Un adjunto puede pertenecer a un acta de costo)
  costActa   CostActa? @relation(fields: [costActaId], references: [id], onDelete: Cascade) // <-- AÑADE ESTA LÍNEA
}

model Acta {
  id          String     @id @default(cuid())
  number      String     @unique
  title       String
  date        DateTime
  area        ActaArea
  status      ActaStatus
  summary     String     @db.Text
  commitments Commitment[]
  attachments Attachment[]
  signatures  Signature[]
  requiredSignatoriesJson String?    @db.Text // <-- AÑADE ESTA LÍNEA
  createdAt   DateTime   @default(now()) // <-- AÑADE ESTA LÍNEA
  updatedAt   DateTime   @updatedAt      // <-- AÑADE ESTA LÍNEA
}

model Commitment {
  id            String           @id @default(cuid())
  description   String           @db.Text
  dueDate       DateTime
  status        CommitmentStatus @default(PENDING)
  actaId        String
  acta          Acta             @relation(fields: [actaId], references: [id], onDelete: Cascade)
  responsibleId String
  responsible   User             @relation(fields: [responsibleId], references: [id])
}

model Signature {
  id         String   @id @default(cuid())
  signedAt   DateTime @default(now())
  signerId   String
  signer     User     @relation(fields: [signerId], references: [id], onDelete: Cascade)
  logEntryId String?
  logEntry   LogEntry? @relation(fields: [logEntryId], references: [id], onDelete: Cascade)
  actaId     String? // <-- AÑADE ESTA LÍNEA
  acta       Acta?     @relation(fields: [actaId], references: [id], onDelete: Cascade) // <-- AÑADE ESTA LÍNEA
}

enum ActaArea {
  COMITE_OBRA
  HSE
  AMBIENTAL
  SOCIAL
  JURIDICO
  TECNICO
  OTHER
}

enum ActaStatus {
  SIGNED
  DRAFT
  FOR_SIGNATURES
  CLOSED
}

enum CommitmentStatus {
  PENDING
  COMPLETED
}

enum CommunicationStatus {
  PENDIENTE
  EN_TRAMITE
  RESUELTO
}

enum DeliveryMethod {
  MAIL
  PRINTED
  SYSTEM
  FAX
}

model Communication {
  id               String              @id @default(cuid())
  radicado         String              @unique
  subject          String
  description      String?             @db.Text
  senderEntity     String
  senderName       String
  senderTitle      String
  recipientEntity  String
  recipientName    String
  recipientTitle   String
  signerName       String
  sentDate         DateTime
  dueDate          DateTime?
  deliveryMethod   DeliveryMethod
  notes            String?             @db.Text
  status           CommunicationStatus @default(PENDIENTE)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relación con el usuario que subió el registro
  uploaderId       String
  uploader         User                @relation("UploadedCommunications", fields: [uploaderId], references: [id]) // <-- MODIFICA ESTA LÍNEA
  // Relación para respuestas (hilo de conversación)
  parentId         String?
  parent           Communication?      @relation("CommunicationThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  responses        Communication[]     @relation("CommunicationThread")

  // Relaciones futuras para adjuntos e historial
  // attachments      Attachment[]
  // statusHistory    StatusChange[]
}

enum DrawingDiscipline {
  ARQUITECTONICO
  ESTRUCTURAL
  ELECTRICO
  HIDROSANITARIO
  MECANICO
  URBANISMO
  SEÑALIZACION
  GEOTECNIA
  OTHER
}

enum DrawingStatus {
  VIGENTE
  OBSOLETO
}

model Drawing {
  id         String            @id @default(cuid())
  code       String            @unique // ej. "EST-001-A"
  title      String
  discipline DrawingDiscipline
  status     DrawingStatus     @default(VIGENTE)
  versions   DrawingVersion[]
  comments   Comment[]         @relation("DrawingComments") // <-- AÑADE ESTA LÍNEA
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model DrawingVersion {
  id            String   @id @default(cuid())
  versionNumber Int
  fileName      String
  url           String   @db.Text
  size          Int
  uploadDate    DateTime @default(now())

  drawingId     String
  drawing       Drawing  @relation(fields: [drawingId], references: [id], onDelete: Cascade)

  uploaderId    String
  uploader      User     @relation(fields: [uploaderId], references: [id])
}

enum WorkActaStatus {
  APPROVED
  IN_REVIEW
  DRAFT
}

model ContractItem {
  id               String         @id @default(cuid())
  itemCode         String         @unique
  description      String         @db.Text
  unit             String
  unitPrice        Float
  contractQuantity Float
  workActaItems    WorkActaItem[]
}

model WorkActa {
  id        String         @id @default(cuid())
  number    String         @unique
  period    String
  date      DateTime
  status    WorkActaStatus @default(DRAFT)
  items     WorkActaItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WorkActaItem {
  id        String @id @default(cuid())
  quantity  Float

  workActaId String
  workActa   WorkActa @relation(fields: [workActaId], references: [id], onDelete: Cascade)

  contractItemId String
  contractItem   ContractItem @relation(fields: [contractItemId], references: [id], onDelete: Cascade)
}

enum CostActaStatus {
  SUBMITTED    // Radicada
  IN_REVIEW    // En Revisión
  OBSERVED     // Observada
  APPROVED     // Aprobada
  IN_PAYMENT   // En Trámite de Pago
  PAID         // Pagada
}

model CostActa {
  id                 String         @id @default(cuid())
  number             String         @unique
  period             String
  submissionDate     DateTime
  approvalDate       DateTime?
  paymentDueDate     DateTime?
  billedAmount       Float
  totalContractValue Float          // Guardamos el valor total *en el momento* de crear el acta
  status             CostActaStatus @default(SUBMITTED)
  relatedProgress    String?        @db.Text
  observations       Observation[]
  attachments        Attachment[]   // Reutilizamos el modelo Attachment
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Observation {
  id        String   @id @default(cuid())
  text      String   @db.Text
  timestamp DateTime @default(now())

  authorId  String
  author    User     @relation(fields: [authorId], references: [id]) // Quién hizo la observación

  costActaId String
  costActa   CostActa @relation(fields: [costActaId], references: [id], onDelete: Cascade) // A qué acta pertenece
}