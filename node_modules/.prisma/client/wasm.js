
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  projectRole: 'projectRole',
  appRole: 'appRole',
  avatarUrl: 'avatarUrl',
  status: 'status',
  lastLoginAt: 'lastLoginAt',
  tokenVersion: 'tokenVersion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contractId: 'contractId',
  object: 'object',
  contractorName: 'contractorName',
  supervisorName: 'supervisorName',
  initialValue: 'initialValue',
  startDate: 'startDate',
  initialEndDate: 'initialEndDate',
  interventoriaContractId: 'interventoriaContractId',
  interventoriaInitialValue: 'interventoriaInitialValue',
  technicalSupervisorName: 'technicalSupervisorName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeyPersonnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  company: 'company',
  email: 'email',
  phone: 'phone',
  projectId: 'projectId'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  radicado: 'radicado',
  subject: 'subject',
  description: 'description',
  senderEntity: 'senderEntity',
  senderName: 'senderName',
  senderTitle: 'senderTitle',
  recipientEntity: 'recipientEntity',
  recipientName: 'recipientName',
  recipientTitle: 'recipientTitle',
  signerName: 'signerName',
  sentDate: 'sentDate',
  dueDate: 'dueDate',
  deliveryMethod: 'deliveryMethod',
  notes: 'notes',
  status: 'status',
  uploaderId: 'uploaderId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunicationStatusHistoryScalarFieldEnum = {
  id: 'id',
  status: 'status',
  timestamp: 'timestamp',
  communicationId: 'communicationId',
  userId: 'userId'
};

exports.Prisma.ContractModificationScalarFieldEnum = {
  id: 'id',
  number: 'number',
  type: 'type',
  date: 'date',
  value: 'value',
  days: 'days',
  justification: 'justification',
  attachmentId: 'attachmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeeklyReportScalarFieldEnum = {
  id: 'id',
  number: 'number',
  startDate: 'startDate',
  endDate: 'endDate',
  summary: 'summary',
  progressSummary: 'progressSummary',
  nextWeekPlan: 'nextWeekPlan',
  issues: 'issues',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogEntryScalarFieldEnum = {
  id: 'id',
  folioNumber: 'folioNumber',
  title: 'title',
  description: 'description',
  type: 'type',
  subject: 'subject',
  location: 'location',
  activityStartDate: 'activityStartDate',
  activityEndDate: 'activityEndDate',
  isConfidential: 'isConfidential',
  status: 'status',
  authorId: 'authorId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogEntryHistoryScalarFieldEnum = {
  id: 'id',
  fieldName: 'fieldName',
  oldValue: 'oldValue',
  newValue: 'newValue',
  timestamp: 'timestamp',
  logEntryId: 'logEntryId',
  userId: 'userId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  timestamp: 'timestamp',
  authorId: 'authorId',
  logEntryId: 'logEntryId',
  drawingId: 'drawingId'
};

exports.Prisma.SignatureScalarFieldEnum = {
  id: 'id',
  signedAt: 'signedAt',
  signerId: 'signerId',
  logEntryId: 'logEntryId',
  actaId: 'actaId',
  reportId: 'reportId'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  url: 'url',
  size: 'size',
  type: 'type',
  logEntryId: 'logEntryId',
  communicationId: 'communicationId',
  actaId: 'actaId',
  costActaId: 'costActaId',
  reportId: 'reportId',
  commentId: 'commentId',
  workActaId: 'workActaId',
  weeklyReportId: 'weeklyReportId',
  createdAt: 'createdAt'
};

exports.Prisma.ActaScalarFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  date: 'date',
  area: 'area',
  status: 'status',
  summary: 'summary',
  requiredSignatoriesJson: 'requiredSignatoriesJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommitmentScalarFieldEnum = {
  id: 'id',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status',
  responsibleId: 'responsibleId',
  actaId: 'actaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CostActaScalarFieldEnum = {
  id: 'id',
  number: 'number',
  period: 'period',
  submissionDate: 'submissionDate',
  approvalDate: 'approvalDate',
  paymentDueDate: 'paymentDueDate',
  billedAmount: 'billedAmount',
  totalContractValue: 'totalContractValue',
  status: 'status',
  relatedProgress: 'relatedProgress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ObservationScalarFieldEnum = {
  id: 'id',
  text: 'text',
  timestamp: 'timestamp',
  authorId: 'authorId',
  costActaId: 'costActaId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  reportScope: 'reportScope',
  number: 'number',
  period: 'period',
  submissionDate: 'submissionDate',
  summary: 'summary',
  status: 'status',
  authorId: 'authorId',
  requiredSignatoriesJson: 'requiredSignatoriesJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DrawingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  discipline: 'discipline',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DrawingVersionScalarFieldEnum = {
  id: 'id',
  versionNumber: 'versionNumber',
  fileName: 'fileName',
  url: 'url',
  size: 'size',
  uploadDate: 'uploadDate',
  uploaderId: 'uploaderId',
  drawingId: 'drawingId'
};

exports.Prisma.PhotoEntryScalarFieldEnum = {
  id: 'id',
  url: 'url',
  date: 'date',
  notes: 'notes',
  authorId: 'authorId',
  controlPointId: 'controlPointId',
  attachmentId: 'attachmentId'
};

exports.Prisma.ControlPointScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectTaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  duration: 'duration',
  isSummary: 'isSummary',
  outlineLevel: 'outlineLevel',
  dependencies: 'dependencies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractItemScalarFieldEnum = {
  id: 'id',
  itemCode: 'itemCode',
  description: 'description',
  unit: 'unit',
  unitPrice: 'unitPrice',
  contractQuantity: 'contractQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkActaScalarFieldEnum = {
  id: 'id',
  number: 'number',
  period: 'period',
  date: 'date',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkActaItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  workActaId: 'workActaId',
  contractItemId: 'contractItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  RESIDENT: 'RESIDENT',
  SUPERVISOR: 'SUPERVISOR',
  CONTRACTOR_REP: 'CONTRACTOR_REP'
};

exports.AppRole = exports.$Enums.AppRole = {
  admin: 'admin',
  editor: 'editor',
  viewer: 'viewer'
};

exports.DeliveryMethod = exports.$Enums.DeliveryMethod = {
  SYSTEM: 'SYSTEM',
  MAIL: 'MAIL',
  PHYSICAL: 'PHYSICAL'
};

exports.CommunicationStatus = exports.$Enums.CommunicationStatus = {
  PENDIENTE: 'PENDIENTE',
  EN_TRAMITE: 'EN_TRAMITE',
  RESUELTO: 'RESUELTO',
  ARCHIVADO: 'ARCHIVADO'
};

exports.ModificationType = exports.$Enums.ModificationType = {
  ADDITION: 'ADDITION',
  TIME_EXTENSION: 'TIME_EXTENSION',
  SCOPE_CHANGE: 'SCOPE_CHANGE',
  SUSPENSION: 'SUSPENSION',
  REINSTATEMENT: 'REINSTATEMENT',
  OTHER: 'OTHER'
};

exports.EntryType = exports.$Enums.EntryType = {
  GENERAL: 'GENERAL',
  QUALITY: 'QUALITY',
  SAFETY: 'SAFETY',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  TECHNICAL: 'TECHNICAL'
};

exports.EntryStatus = exports.$Enums.EntryStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  NEEDS_REVIEW: 'NEEDS_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ActaArea = exports.$Enums.ActaArea = {
  COMITE_OBRA: 'COMITE_OBRA',
  COMITE_TECNICO: 'COMITE_TECNICO',
  HSE: 'HSE',
  CALIDAD: 'CALIDAD',
  SOCIAL: 'SOCIAL',
  AMBIENTAL: 'AMBIENTAL',
  OTHER: 'OTHER'
};

exports.ActaStatus = exports.$Enums.ActaStatus = {
  DRAFT: 'DRAFT',
  FOR_SIGNATURES: 'FOR_SIGNATURES',
  SIGNED: 'SIGNED',
  CANCELLED: 'CANCELLED'
};

exports.CommitmentStatus = exports.$Enums.CommitmentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DELAYED: 'DELAYED'
};

exports.CostActaStatus = exports.$Enums.CostActaStatus = {
  SUBMITTED: 'SUBMITTED',
  IN_REVIEW: 'IN_REVIEW',
  OBSERVED: 'OBSERVED',
  APPROVED: 'APPROVED',
  IN_PAYMENT: 'IN_PAYMENT',
  PAID: 'PAID',
  REJECTED: 'REJECTED'
};

exports.ReportScope = exports.$Enums.ReportScope = {
  OBRA: 'OBRA',
  INTERVENTORIA: 'INTERVENTORIA'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  OBSERVED: 'OBSERVED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.DrawingDiscipline = exports.$Enums.DrawingDiscipline = {
  ARQUITECTONICO: 'ARQUITECTONICO',
  ESTRUCTURAL: 'ESTRUCTURAL',
  HIDROSANITARIO: 'HIDROSANITARIO',
  ELECTRICO: 'ELECTRICO',
  MECANICO: 'MECANICO',
  SENALIZACION: 'SENALIZACION',
  OTHER: 'OTHER'
};

exports.DrawingStatus = exports.$Enums.DrawingStatus = {
  VIGENTE: 'VIGENTE',
  OBSOLETO: 'OBSOLETO',
  ANULADO: 'ANULADO'
};

exports.WorkActaStatus = exports.$Enums.WorkActaStatus = {
  DRAFT: 'DRAFT',
  IN_REVIEW: 'IN_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  KeyPersonnel: 'KeyPersonnel',
  Communication: 'Communication',
  CommunicationStatusHistory: 'CommunicationStatusHistory',
  ContractModification: 'ContractModification',
  WeeklyReport: 'WeeklyReport',
  LogEntry: 'LogEntry',
  LogEntryHistory: 'LogEntryHistory',
  Comment: 'Comment',
  Signature: 'Signature',
  Attachment: 'Attachment',
  Acta: 'Acta',
  Commitment: 'Commitment',
  CostActa: 'CostActa',
  Observation: 'Observation',
  Report: 'Report',
  Drawing: 'Drawing',
  DrawingVersion: 'DrawingVersion',
  PhotoEntry: 'PhotoEntry',
  ControlPoint: 'ControlPoint',
  ProjectTask: 'ProjectTask',
  ContractItem: 'ContractItem',
  WorkActa: 'WorkActa',
  WorkActaItem: 'WorkActaItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
